import streamlit as st
import pandas as pd
import joblib
import json

# --- Page Configuration ---
# Set the configuration for the Streamlit page.
st.set_page_config(page_title="NPL Prediction App", page_icon="üí∏", layout="centered")

# --- Resource Loading Function ---
@st.cache_resource
def load_resources():
    """
    Load the trained model pipeline and UI options from disk.
    Using st.cache_resource to prevent reloading on every interaction.
    """
    # It's crucial that this model was trained on the '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ' feature.
    model = joblib.load('pipeline.joblib')
    with open('options.json', 'r', encoding='utf8') as f:
        options = json.load(f)
    return model, options

# --- Load Model and Options ---
# Try to load the necessary files. If they don't exist, show an error and stop.
try:
    model, options = load_resources()
except FileNotFoundError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• 'pipeline.joblib' ‡∏´‡∏£‡∏∑‡∏≠ 'options.json'. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")
    st.stop()


# --- User Interface ---
st.title("üí∏ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ (NPL)")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏£‡∏∞‡∏î‡∏±‡∏ö")

# Create a form for a cleaner layout and single submission button.
with st.form("input_form"):
    st.header("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")

    # Arrange input fields into two columns for a better UI.
    col1, col2 = st.columns(2)
    
    with col1:
        # Categorical feature inputs using select boxes populated from options.json
        occupation = st.selectbox("‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (Occupation)", options=options['‡∏≠‡∏≤‡∏ä‡∏µ‡∏û'])
        purpose = st.selectbox("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå (Purpose)", options=options['‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå'])
        status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û (Marital Status)", options=options['‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û'])
        gender = st.selectbox("‡πÄ‡∏û‡∏® (Gender)", options=options['‡πÄ‡∏û‡∏®'])
    
    with col2:
        # Numerical feature inputs
        income = st.number_input("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=0, value=15000, step=1000)
        loan_amount = st.number_input("‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠", min_value=0, value=50000, step=5000)
        # --- EDITED: Changed DTI input to Monthly Payment input ---
        # Instead of asking for the ratio, we ask for the monthly payment to calculate it.
        monthly_payment = st.number_input("‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏á‡∏ß‡∏î (‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=0, value=5000, step=500)


    # The submission button for the form.
    submitted = st.form_submit_button("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")

# --- Results Display Section ---
if submitted:
    # --- EDITED: Calculate DTI from inputs ---
    # The model expects the '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ' feature.
    # We calculate it here from the user's inputs before prediction.
    # Added a check for income > 0 to avoid division by zero error.
    if income > 0:
        dti_calculated = (monthly_payment / income) * 100
    else:
        dti_calculated = 0 # Default to 0 if income is 0

    # Collect user input into a pandas DataFrame.
    input_data = pd.DataFrame({
        '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': [occupation],
        '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå': [purpose],
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û': [status],
        '‡πÄ‡∏û‡∏®': [gender],
        '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ': [income],
        '‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠': [loan_amount],
        # The model was trained with this feature name, so we must use it.
        '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ': [dti_calculated]
    })

    # Use the model to predict the probability of being an NPL.
    predict_proba = model.predict_proba(input_data)[0]
    npl_probability = predict_proba[1]

    st.header("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")

    # Define risk levels based on NPL probability.
    if npl_probability < 0.25: # 0% - 24.99%
        st.success(f"**‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥** (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NPL: {npl_probability:.2%})", icon="‚úÖ")
        st.write("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: **‡∏™‡∏π‡∏á**")
    elif npl_probability < 0.50: # 25% - 49.99%
        st.info(f"**‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á** (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NPL: {npl_probability:.2%})", icon="ü§î")
        st.write("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: **‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°** ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°")
    elif npl_probability < 0.75: # 50% - 74.99%
        st.warning(f"**‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á** (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NPL: {npl_probability:.2%})", icon="‚ö†Ô∏è")
        st.write("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: **‡∏ï‡πà‡∏≥** ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Ñ‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠")
    else: # 75% - 100%
        st.error(f"**‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å** (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NPL: {npl_probability:.2%})", icon="üö®")
        st.write("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: **‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å** ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠")

    # Display a progress bar to visually represent the NPL probability.
    st.progress(npl_probability)
    st.caption("‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏µ‡∏¢ (NPL)")
